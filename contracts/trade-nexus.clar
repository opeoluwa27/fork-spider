;; marketplace.clar
;;
;; This contract implements a decentralized marketplace for smart contract templates
;; on the Stacks blockchain, enabling developers to create, share, and monetize
;; reusable smart contract components.
;;
;; The contract handles the economic transactions between template creators and users,
;; manages different pricing models, and enforces access rights to purchased templates.
;; Error codes
(define-constant ERR-NOT-AUTHORIZED (err u100))
(define-constant ERR-TEMPLATE-NOT-FOUND (err u101))
(define-constant ERR-INVALID-PRICE (err u102))
(define-constant ERR-PAYMENT-FAILED (err u103))
(define-constant ERR-ACCESS-DENIED (err u104))
(define-constant ERR-INVALID-PARAM (err u105))
(define-constant ERR-NOT-FOR-SALE (err u106))
(define-constant ERR-ALREADY-PURCHASED (err u107))
(define-constant ERR-INVALID-LICENSING-MODEL (err u108))
(define-constant ERR-SUBSCRIPTION-EXPIRED (err u109))
(define-constant ERR-INSUFFICIENT-FUNDS (err u110))
(define-constant ERR-ESCROW-NOT-FOUND (err u111))
(define-constant ERR-ESCROW-ALREADY-RESOLVED (err u112))
;; Platform settings
(define-constant PLATFORM-FEE-PERCENT u5) ;; 5% platform fee
(define-data-var platform-address principal 'SP000000000000000000002Q6VF78) ;; Platform treasury address
;; Licensing model types
(define-constant LICENSE-ONE-TIME u1)
(define-constant LICENSE-SUBSCRIPTION u2)
(define-constant LICENSE-USAGE-BASED u3)
;; Template data structure
;; Stores metadata and pricing information for each template
(define-map templates
  { template-id: uint }
  {
    owner: principal,
    title: (string-ascii 100),
    description: (string-utf8 500),
    price: uint,
    licensing-model: uint, ;; One of the LICENSE-* constants
    subscription-duration-blocks: uint, ;; Only used for subscription model
    usage-limit: uint, ;; Only used for usage-based model
    royalty-percent: uint, ;; Creator royalty for resales
    is-active: bool,
  }
)
;; Purchases data structure
;; Tracks all purchases of templates and their details
(define-map purchases
  {
    template-id: uint,
    user: principal,
  }
  {
    purchase-block-height: uint,
    expiration-block-height: (optional uint), ;; For subscriptions
    usage-count: uint, ;; For usage-based licenses
    usage-limit: uint, ;; For usage-based licenses
    price-paid: uint,
  }
)
;; Escrow data structure
;; Used for dispute resolution and payment protection
(define-map escrow-payments
  { escrow-id: uint }
  {
    template-id: uint,
    buyer: principal,
    seller: principal,
    amount: uint,
    is-released: bool,
    is-refunded: bool,
    created-at-block: uint,
  }
)
;; Track the next template ID to be assigned
(define-data-var next-template-id uint u1)
;; Track the next escrow ID to be assigned
(define-data-var next-escrow-id uint u1)
;; Total revenue generated by the platform
(define-data-var total-platform-revenue uint u0)
;; Private Functions
;; Calculate platform fee for a given amount
(define-private (calculate-platform-fee (amount uint))
  (/ (* amount PLATFORM-FEE-PERCENT) u100)
)

;; Calculate creator royalty for a given amount and percentage
(define-private (calculate-royalty
    (amount uint)
    (royalty-percent uint)
  )
  (/ (* amount royalty-percent) u100)
)

;; Transfer STX with proper error handling
(define-private (transfer-stx
    (amount uint)
    (recipient principal)
  )
  (if (> amount u0)
    (stx-transfer? amount tx-sender recipient)
    (ok true) ;; If amount is 0, consider transfer successful
  )
)

;; Get template by ID with error handling
(define-private (get-template-by-id (template-id uint))
  (match (map-get? templates { template-id: template-id })
    template (ok template)
    ERR-TEMPLATE-NOT-FOUND
  )
)

;; Increment the next template ID
(define-private (increment-template-id)
  (let ((current-id (var-get next-template-id)))
    (var-set next-template-id (+ current-id u1))
    current-id
  )
)

;; Increment the next escrow ID
(define-private (increment-escrow-id)
  (let ((current-id (var-get next-escrow-id)))
    (var-set next-escrow-id (+ current-id u1))
    current-id
  )
)

;; Track platform revenue
(define-private (add-platform-revenue (amount uint))
  (var-set total-platform-revenue (+ (var-get total-platform-revenue) amount))
)

;; Read-only Functions
;; Get details of a template
(define-read-only (get-template (template-id uint))
  (match (map-get? templates { template-id: template-id })
    template (ok template)
    ERR-TEMPLATE-NOT-FOUND
  )
)

;; Get purchase details for a user and template
(define-read-only (get-purchase-details
    (template-id uint)
    (user principal)
  )
  (match (map-get? purchases {
    template-id: template-id,
    user: user,
  })
    purchase (ok purchase)
    (err u404)
  )
)

;; Get escrow details
(define-read-only (get-escrow-details (escrow-id uint))
  (match (map-get? escrow-payments { escrow-id: escrow-id })
    escrow (ok escrow)
    ERR-ESCROW-NOT-FOUND
  )
)

;; Get current platform address
(define-read-only (get-platform-address)
  (var-get platform-address)
)

;; Get total platform revenue
(define-read-only (get-total-platform-revenue)
  (var-get total-platform-revenue)
)

;; Public Functions
;; Create a new template
(define-public (create-template
    (title (string-ascii 100))
    (description (string-utf8 500))
    (price uint)
    (licensing-model uint)
    (subscription-duration-blocks uint)
    (usage-limit uint)
    (royalty-percent uint)
  )
  (let ((template-id (increment-template-id)))
    ;; Validate input parameters
    (asserts!
      (or
        (is-eq licensing-model LICENSE-ONE-TIME)
        (is-eq licensing-model LICENSE-SUBSCRIPTION)
        (is-eq licensing-model LICENSE-USAGE-BASED)
      )
      ERR-INVALID-LICENSING-MODEL
    )
    ;; Validate subscription duration for subscription model
    (asserts!
      (or
        (not (is-eq licensing-model LICENSE-SUBSCRIPTION))
        (> subscription-duration-blocks u0)
      )
      ERR-INVALID-PARAM
    )
    ;; Validate usage limit for usage-based model
    (asserts!
      (or
        (not (is-eq licensing-model LICENSE-USAGE-BASED))
        (> usage-limit u0)
      )
      ERR-INVALID-PARAM
    )
    ;; Validate royalty percentage is reasonable
    (asserts! (<= royalty-percent u50) ERR-INVALID-PARAM)
    ;; Store the template data
    (map-set templates { template-id: template-id } {
      owner: tx-sender,
      title: title,
      description: description,
      price: price,
      licensing-model: licensing-model,
      subscription-duration-blocks: subscription-duration-blocks,
      usage-limit: usage-limit,
      royalty-percent: royalty-percent,
      is-active: true,
    })
    (ok template-id)
  )
)